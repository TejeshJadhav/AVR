
calibrate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000005b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000544  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800200  00800200  000005b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014f0  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf7  00000000  00000000  00001bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000078b  00000000  00000000  000028a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00003034  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007eb  00000000  00000000  00003174  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000080b  00000000  00000000  0000395f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000416a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ad 30       	cpi	r26, 0x0D	; 13
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	fe d1       	rcall	.+1020   	; 0x502 <main>
 106:	1c c2       	rjmp	.+1080   	; 0x540 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <_Z15lcd_port_configv>:
	while(*str != '\0')
	{
		lcd_wr_char(*str);
		str++;
	}
}
 10a:	87 b1       	in	r24, 0x07	; 7
 10c:	87 6f       	ori	r24, 0xF7	; 247
 10e:	87 b9       	out	0x07, r24	; 7
 110:	88 b1       	in	r24, 0x08	; 8
 112:	80 78       	andi	r24, 0x80	; 128
 114:	88 b9       	out	0x08, r24	; 8
 116:	08 95       	ret

00000118 <_Z12lcd_set_4bitv>:
 118:	86 e6       	ldi	r24, 0x66	; 102
 11a:	9e e0       	ldi	r25, 0x0E	; 14
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <_Z12lcd_set_4bitv+0x4>
 120:	00 00       	nop
 122:	40 98       	cbi	0x08, 0	; 8
 124:	41 98       	cbi	0x08, 1	; 8
 126:	80 e3       	ldi	r24, 0x30	; 48
 128:	88 b9       	out	0x08, r24	; 8
 12a:	42 9a       	sbi	0x08, 2	; 8
 12c:	ef ef       	ldi	r30, 0xFF	; 255
 12e:	f7 e4       	ldi	r31, 0x47	; 71
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <_Z12lcd_set_4bitv+0x18>
 134:	00 c0       	rjmp	.+0      	; 0x136 <_Z12lcd_set_4bitv+0x1e>
 136:	00 00       	nop
 138:	42 98       	cbi	0x08, 2	; 8
 13a:	e6 e6       	ldi	r30, 0x66	; 102
 13c:	fe e0       	ldi	r31, 0x0E	; 14
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <_Z12lcd_set_4bitv+0x26>
 142:	00 00       	nop
 144:	40 98       	cbi	0x08, 0	; 8
 146:	41 98       	cbi	0x08, 1	; 8
 148:	88 b9       	out	0x08, r24	; 8
 14a:	42 9a       	sbi	0x08, 2	; 8
 14c:	ef ef       	ldi	r30, 0xFF	; 255
 14e:	f7 e4       	ldi	r31, 0x47	; 71
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <_Z12lcd_set_4bitv+0x38>
 154:	00 c0       	rjmp	.+0      	; 0x156 <_Z12lcd_set_4bitv+0x3e>
 156:	00 00       	nop
 158:	42 98       	cbi	0x08, 2	; 8
 15a:	e6 e6       	ldi	r30, 0x66	; 102
 15c:	fe e0       	ldi	r31, 0x0E	; 14
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <_Z12lcd_set_4bitv+0x46>
 162:	00 00       	nop
 164:	40 98       	cbi	0x08, 0	; 8
 166:	41 98       	cbi	0x08, 1	; 8
 168:	88 b9       	out	0x08, r24	; 8
 16a:	42 9a       	sbi	0x08, 2	; 8
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	97 e4       	ldi	r25, 0x47	; 71
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <_Z12lcd_set_4bitv+0x58>
 174:	00 c0       	rjmp	.+0      	; 0x176 <_Z12lcd_set_4bitv+0x5e>
 176:	00 00       	nop
 178:	42 98       	cbi	0x08, 2	; 8
 17a:	e6 e6       	ldi	r30, 0x66	; 102
 17c:	fe e0       	ldi	r31, 0x0E	; 14
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <_Z12lcd_set_4bitv+0x66>
 182:	00 00       	nop
 184:	40 98       	cbi	0x08, 0	; 8
 186:	41 98       	cbi	0x08, 1	; 8
 188:	80 e2       	ldi	r24, 0x20	; 32
 18a:	88 b9       	out	0x08, r24	; 8
 18c:	42 9a       	sbi	0x08, 2	; 8
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	97 e4       	ldi	r25, 0x47	; 71
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <_Z12lcd_set_4bitv+0x7a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <_Z12lcd_set_4bitv+0x80>
 198:	00 00       	nop
 19a:	42 98       	cbi	0x08, 2	; 8
 19c:	08 95       	ret

0000019e <_Z14lcd_wr_commandh>:
 19e:	98 b1       	in	r25, 0x08	; 8
 1a0:	9f 70       	andi	r25, 0x0F	; 15
 1a2:	98 b9       	out	0x08, r25	; 8
 1a4:	98 b1       	in	r25, 0x08	; 8
 1a6:	28 2f       	mov	r18, r24
 1a8:	20 7f       	andi	r18, 0xF0	; 240
 1aa:	92 2b       	or	r25, r18
 1ac:	98 b9       	out	0x08, r25	; 8
 1ae:	40 98       	cbi	0x08, 0	; 8
 1b0:	41 98       	cbi	0x08, 1	; 8
 1b2:	42 9a       	sbi	0x08, 2	; 8
 1b4:	ef ef       	ldi	r30, 0xFF	; 255
 1b6:	f7 e4       	ldi	r31, 0x47	; 71
 1b8:	31 97       	sbiw	r30, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <_Z14lcd_wr_commandh+0x1a>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <_Z14lcd_wr_commandh+0x20>
 1be:	00 00       	nop
 1c0:	42 98       	cbi	0x08, 2	; 8
 1c2:	98 b1       	in	r25, 0x08	; 8
 1c4:	9f 70       	andi	r25, 0x0F	; 15
 1c6:	98 b9       	out	0x08, r25	; 8
 1c8:	98 b1       	in	r25, 0x08	; 8
 1ca:	82 95       	swap	r24
 1cc:	80 7f       	andi	r24, 0xF0	; 240
 1ce:	89 2b       	or	r24, r25
 1d0:	88 b9       	out	0x08, r24	; 8
 1d2:	40 98       	cbi	0x08, 0	; 8
 1d4:	41 98       	cbi	0x08, 1	; 8
 1d6:	42 9a       	sbi	0x08, 2	; 8
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	97 e4       	ldi	r25, 0x47	; 71
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <_Z14lcd_wr_commandh+0x3e>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <_Z14lcd_wr_commandh+0x44>
 1e2:	00 00       	nop
 1e4:	42 98       	cbi	0x08, 2	; 8
 1e6:	08 95       	ret

000001e8 <_Z8lcd_initv>:
 1e8:	86 e6       	ldi	r24, 0x66	; 102
 1ea:	9e e0       	ldi	r25, 0x0E	; 14
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <_Z8lcd_initv+0x4>
 1f0:	00 00       	nop
 1f2:	88 e2       	ldi	r24, 0x28	; 40
 1f4:	d4 df       	rcall	.-88     	; 0x19e <_Z14lcd_wr_commandh>
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	d2 df       	rcall	.-92     	; 0x19e <_Z14lcd_wr_commandh>
 1fa:	86 e0       	ldi	r24, 0x06	; 6
 1fc:	d0 df       	rcall	.-96     	; 0x19e <_Z14lcd_wr_commandh>
 1fe:	8e e0       	ldi	r24, 0x0E	; 14
 200:	ce df       	rcall	.-100    	; 0x19e <_Z14lcd_wr_commandh>
 202:	80 e8       	ldi	r24, 0x80	; 128
 204:	cc cf       	rjmp	.-104    	; 0x19e <_Z14lcd_wr_commandh>
 206:	08 95       	ret

00000208 <_Z11lcd_wr_charc>:
 208:	98 b1       	in	r25, 0x08	; 8
 20a:	9f 70       	andi	r25, 0x0F	; 15
 20c:	98 b9       	out	0x08, r25	; 8
 20e:	98 b1       	in	r25, 0x08	; 8
 210:	28 2f       	mov	r18, r24
 212:	20 7f       	andi	r18, 0xF0	; 240
 214:	92 2b       	or	r25, r18
 216:	98 b9       	out	0x08, r25	; 8
 218:	40 9a       	sbi	0x08, 0	; 8
 21a:	41 98       	cbi	0x08, 1	; 8
 21c:	42 9a       	sbi	0x08, 2	; 8
 21e:	ef ef       	ldi	r30, 0xFF	; 255
 220:	f7 e4       	ldi	r31, 0x47	; 71
 222:	31 97       	sbiw	r30, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <_Z11lcd_wr_charc+0x1a>
 226:	00 c0       	rjmp	.+0      	; 0x228 <_Z11lcd_wr_charc+0x20>
 228:	00 00       	nop
 22a:	42 98       	cbi	0x08, 2	; 8
 22c:	98 b1       	in	r25, 0x08	; 8
 22e:	9f 70       	andi	r25, 0x0F	; 15
 230:	98 b9       	out	0x08, r25	; 8
 232:	98 b1       	in	r25, 0x08	; 8
 234:	82 95       	swap	r24
 236:	80 7f       	andi	r24, 0xF0	; 240
 238:	89 2b       	or	r24, r25
 23a:	88 b9       	out	0x08, r24	; 8
 23c:	40 9a       	sbi	0x08, 0	; 8
 23e:	41 98       	cbi	0x08, 1	; 8
 240:	42 9a       	sbi	0x08, 2	; 8
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	97 e4       	ldi	r25, 0x47	; 71
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <_Z11lcd_wr_charc+0x3e>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <_Z11lcd_wr_charc+0x44>
 24c:	00 00       	nop
 24e:	42 98       	cbi	0x08, 2	; 8
 250:	08 95       	ret

00000252 <_Z8lcd_homev>:
 252:	80 e8       	ldi	r24, 0x80	; 128
 254:	a4 cf       	rjmp	.-184    	; 0x19e <_Z14lcd_wr_commandh>
 256:	08 95       	ret

00000258 <_Z10lcd_cursorcc>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	69 f0       	breq	.+26     	; 0x276 <_Z10lcd_cursorcc+0x1e>
 25c:	18 f4       	brcc	.+6      	; 0x264 <_Z10lcd_cursorcc+0xc>
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	31 f0       	breq	.+12     	; 0x26e <_Z10lcd_cursorcc+0x16>
 262:	08 95       	ret
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	59 f0       	breq	.+22     	; 0x27e <_Z10lcd_cursorcc+0x26>
 268:	84 30       	cpi	r24, 0x04	; 4
 26a:	69 f0       	breq	.+26     	; 0x286 <_Z10lcd_cursorcc+0x2e>
 26c:	08 95       	ret
		case 1: lcd_wr_command (0x80 + column - 1); break;
 26e:	8f e7       	ldi	r24, 0x7F	; 127
 270:	86 0f       	add	r24, r22
 272:	95 cf       	rjmp	.-214    	; 0x19e <_Z14lcd_wr_commandh>
 274:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 276:	8f eb       	ldi	r24, 0xBF	; 191
 278:	86 0f       	add	r24, r22
 27a:	91 cf       	rjmp	.-222    	; 0x19e <_Z14lcd_wr_commandh>
 27c:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 27e:	83 e9       	ldi	r24, 0x93	; 147
 280:	86 0f       	add	r24, r22
 282:	8d cf       	rjmp	.-230    	; 0x19e <_Z14lcd_wr_commandh>
 284:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 286:	83 ed       	ldi	r24, 0xD3	; 211
 288:	86 0f       	add	r24, r22
 28a:	89 cf       	rjmp	.-238    	; 0x19e <_Z14lcd_wr_commandh>
 28c:	08 95       	ret

0000028e <_Z9lcd_printccji>:
 28e:	0f 93       	push	r16
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 290:	1f 93       	push	r17
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	8a 01       	movw	r16, r20
 298:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 29a:	88 23       	and	r24, r24
 29c:	11 f0       	breq	.+4      	; 0x2a2 <_Z9lcd_printccji+0x14>
 29e:	61 11       	cpse	r22, r1
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <_Z9lcd_printccji+0x18>
	{
		lcd_home();
 2a2:	d7 df       	rcall	.-82     	; 0x252 <_Z8lcd_homev>
 2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <_Z9lcd_printccji+0x1a>
	}
	else
	{
		lcd_cursor(row,coloumn);
 2a6:	d8 df       	rcall	.-80     	; 0x258 <_Z10lcd_cursorcc>
 2a8:	c5 30       	cpi	r28, 0x05	; 5
	}
	if(digits==5 || flag==1)
 2aa:	d1 05       	cpc	r29, r1
 2ac:	09 f0       	breq	.+2      	; 0x2b0 <_Z9lcd_printccji+0x22>
 2ae:	d1 c0       	rjmp	.+418    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 2b0:	98 01       	movw	r18, r16
	{
		million=value/10000+48;
 2b2:	32 95       	swap	r19
 2b4:	22 95       	swap	r18
 2b6:	2f 70       	andi	r18, 0x0F	; 15
 2b8:	23 27       	eor	r18, r19
 2ba:	3f 70       	andi	r19, 0x0F	; 15
 2bc:	23 27       	eor	r18, r19
 2be:	a7 e4       	ldi	r26, 0x47	; 71
 2c0:	b3 e0       	ldi	r27, 0x03	; 3
 2c2:	2f d1       	rcall	.+606    	; 0x522 <__umulhisi3>
 2c4:	96 95       	lsr	r25
 2c6:	87 95       	ror	r24
 2c8:	96 95       	lsr	r25
 2ca:	87 95       	ror	r24
 2cc:	96 95       	lsr	r25
 2ce:	87 95       	ror	r24
 2d0:	c0 96       	adiw	r24, 0x30	; 48
 2d2:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <million+0x1>
 2d6:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <million>
		lcd_wr_char(million);
 2da:	96 df       	rcall	.-212    	; 0x208 <_Z11lcd_wr_charc>
 2dc:	98 01       	movw	r18, r16
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
 2de:	36 95       	lsr	r19
 2e0:	27 95       	ror	r18
 2e2:	36 95       	lsr	r19
 2e4:	27 95       	ror	r18
 2e6:	36 95       	lsr	r19
 2e8:	27 95       	ror	r18
 2ea:	a5 ec       	ldi	r26, 0xC5	; 197
 2ec:	b0 e2       	ldi	r27, 0x20	; 32
 2ee:	19 d1       	rcall	.+562    	; 0x522 <__umulhisi3>
 2f0:	ac 01       	movw	r20, r24
 2f2:	52 95       	swap	r21
 2f4:	42 95       	swap	r20
 2f6:	4f 70       	andi	r20, 0x0F	; 15
 2f8:	45 27       	eor	r20, r21
 2fa:	5f 70       	andi	r21, 0x0F	; 15
 2fc:	45 27       	eor	r20, r21
 2fe:	50 93 0c 02 	sts	0x020C, r21	; 0x80020c <temp+0x1>
 302:	40 93 0b 02 	sts	0x020B, r20	; 0x80020b <temp>
		thousand = temp%10 + 48;
 306:	9a 01       	movw	r18, r20
 308:	ad ec       	ldi	r26, 0xCD	; 205
 30a:	bc ec       	ldi	r27, 0xCC	; 204
 30c:	0a d1       	rcall	.+532    	; 0x522 <__umulhisi3>
 30e:	96 95       	lsr	r25
 310:	87 95       	ror	r24
 312:	96 95       	lsr	r25
 314:	87 95       	ror	r24
 316:	96 95       	lsr	r25
 318:	87 95       	ror	r24
 31a:	9c 01       	movw	r18, r24
 31c:	22 0f       	add	r18, r18
 31e:	33 1f       	adc	r19, r19
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	82 0f       	add	r24, r18
 32e:	93 1f       	adc	r25, r19
 330:	9a 01       	movw	r18, r20
 332:	28 1b       	sub	r18, r24
 334:	39 0b       	sbc	r19, r25
 336:	c9 01       	movw	r24, r18
 338:	c0 96       	adiw	r24, 0x30	; 48
 33a:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <thousand+0x1>
 33e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <thousand>
		lcd_wr_char(thousand);
 342:	62 df       	rcall	.-316    	; 0x208 <_Z11lcd_wr_charc>
 344:	03 c0       	rjmp	.+6      	; 0x34c <_Z9lcd_printccji+0xbe>
 346:	c3 30       	cpi	r28, 0x03	; 3
		flag=1;
	}
	if(digits==3 || flag==1)
 348:	d1 05       	cpc	r29, r1
 34a:	79 f5       	brne	.+94     	; 0x3aa <_Z9lcd_printccji+0x11c>
 34c:	98 01       	movw	r18, r16
	{
		temp = value/100;
 34e:	36 95       	lsr	r19
 350:	27 95       	ror	r18
 352:	36 95       	lsr	r19
 354:	27 95       	ror	r18
 356:	ab e7       	ldi	r26, 0x7B	; 123
 358:	b4 e1       	ldi	r27, 0x14	; 20
 35a:	e3 d0       	rcall	.+454    	; 0x522 <__umulhisi3>
 35c:	ac 01       	movw	r20, r24
 35e:	56 95       	lsr	r21
 360:	47 95       	ror	r20
 362:	50 93 0c 02 	sts	0x020C, r21	; 0x80020c <temp+0x1>
 366:	40 93 0b 02 	sts	0x020B, r20	; 0x80020b <temp>
		hundred = temp%10 + 48;
 36a:	9a 01       	movw	r18, r20
 36c:	ad ec       	ldi	r26, 0xCD	; 205
 36e:	bc ec       	ldi	r27, 0xCC	; 204
 370:	d8 d0       	rcall	.+432    	; 0x522 <__umulhisi3>
 372:	96 95       	lsr	r25
 374:	87 95       	ror	r24
 376:	96 95       	lsr	r25
 378:	87 95       	ror	r24
 37a:	96 95       	lsr	r25
 37c:	87 95       	ror	r24
 37e:	9c 01       	movw	r18, r24
 380:	22 0f       	add	r18, r18
 382:	33 1f       	adc	r19, r19
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	82 0f       	add	r24, r18
 392:	93 1f       	adc	r25, r19
 394:	9a 01       	movw	r18, r20
 396:	28 1b       	sub	r18, r24
 398:	39 0b       	sbc	r19, r25
 39a:	c9 01       	movw	r24, r18
 39c:	c0 96       	adiw	r24, 0x30	; 48
 39e:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <hundred+0x1>
 3a2:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <hundred>
		lcd_wr_char(hundred);
 3a6:	30 df       	rcall	.-416    	; 0x208 <_Z11lcd_wr_charc>
 3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <_Z9lcd_printccji+0x124>
		flag=1;
	}
	if(digits==2 || flag==1)
 3aa:	c2 30       	cpi	r28, 0x02	; 2
 3ac:	d1 05       	cpc	r29, r1
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <_Z9lcd_printccji+0x124>
 3b0:	55 c0       	rjmp	.+170    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
	{
		temp = value/10;
 3b2:	98 01       	movw	r18, r16
 3b4:	ad ec       	ldi	r26, 0xCD	; 205
 3b6:	bc ec       	ldi	r27, 0xCC	; 204
 3b8:	b4 d0       	rcall	.+360    	; 0x522 <__umulhisi3>
 3ba:	ac 01       	movw	r20, r24
 3bc:	56 95       	lsr	r21
 3be:	47 95       	ror	r20
 3c0:	56 95       	lsr	r21
 3c2:	47 95       	ror	r20
 3c4:	56 95       	lsr	r21
 3c6:	47 95       	ror	r20
 3c8:	50 93 0c 02 	sts	0x020C, r21	; 0x80020c <temp+0x1>
 3cc:	40 93 0b 02 	sts	0x020B, r20	; 0x80020b <temp>
		tens = temp%10 + 48;
 3d0:	9a 01       	movw	r18, r20
 3d2:	a7 d0       	rcall	.+334    	; 0x522 <__umulhisi3>
 3d4:	96 95       	lsr	r25
 3d6:	87 95       	ror	r24
 3d8:	96 95       	lsr	r25
 3da:	87 95       	ror	r24
 3dc:	96 95       	lsr	r25
 3de:	87 95       	ror	r24
 3e0:	9c 01       	movw	r18, r24
 3e2:	22 0f       	add	r18, r18
 3e4:	33 1f       	adc	r19, r19
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	82 0f       	add	r24, r18
 3f4:	93 1f       	adc	r25, r19
 3f6:	9a 01       	movw	r18, r20
 3f8:	28 1b       	sub	r18, r24
 3fa:	39 0b       	sbc	r19, r25
 3fc:	c9 01       	movw	r24, r18
 3fe:	c0 96       	adiw	r24, 0x30	; 48
 400:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <tens+0x1>
 404:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <tens>
		lcd_wr_char(tens);
 408:	ff de       	rcall	.-514    	; 0x208 <_Z11lcd_wr_charc>
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
 40a:	98 01       	movw	r18, r16
 40c:	ad ec       	ldi	r26, 0xCD	; 205
 40e:	bc ec       	ldi	r27, 0xCC	; 204
 410:	88 d0       	rcall	.+272    	; 0x522 <__umulhisi3>
 412:	96 95       	lsr	r25
 414:	87 95       	ror	r24
 416:	96 95       	lsr	r25
 418:	87 95       	ror	r24
 41a:	96 95       	lsr	r25
 41c:	87 95       	ror	r24
 41e:	9c 01       	movw	r18, r24
 420:	22 0f       	add	r18, r18
 422:	33 1f       	adc	r19, r19
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	82 0f       	add	r24, r18
 432:	93 1f       	adc	r25, r19
 434:	98 01       	movw	r18, r16
 436:	28 1b       	sub	r18, r24
 438:	39 0b       	sbc	r19, r25
 43a:	c9 01       	movw	r24, r18
 43c:	c0 96       	adiw	r24, 0x30	; 48
 43e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <unit+0x1>
 442:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <unit>
		lcd_wr_char(unit);
 446:	e0 de       	rcall	.-576    	; 0x208 <_Z11lcd_wr_charc>
	}
	if(digits>5)
 448:	26 97       	sbiw	r28, 0x06	; 6
 44a:	64 f0       	brlt	.+24     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
	{
		lcd_wr_char('E');
 44c:	85 e4       	ldi	r24, 0x45	; 69
 44e:	dc de       	rcall	.-584    	; 0x208 <_Z11lcd_wr_charc>
 450:	09 c0       	rjmp	.+18     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
	}
	
}
 452:	c4 30       	cpi	r28, 0x04	; 4
	{
		million=value/10000+48;
		lcd_wr_char(million);
		flag=1;
	}
	if(digits==4 || flag==1)
 454:	d1 05       	cpc	r29, r1
 456:	09 f0       	breq	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 458:	76 cf       	rjmp	.-276    	; 0x346 <_Z9lcd_printccji+0xb8>
 45a:	40 cf       	rjmp	.-384    	; 0x2dc <_Z9lcd_printccji+0x4e>
 45c:	c1 30       	cpi	r28, 0x01	; 1
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
 45e:	d1 05       	cpc	r29, r1
 460:	99 f7       	brne	.-26     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 462:	d3 cf       	rjmp	.-90     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 464:	df 91       	pop	r29
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
}
 466:	cf 91       	pop	r28
 468:	1f 91       	pop	r17
 46a:	0f 91       	pop	r16
 46c:	08 95       	ret

0000046e <_Z14adc_pin_configv>:
 46e:	10 ba       	out	0x10, r1	; 16

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
 PORTF = 0x00;
 470:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
 472:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
 PORTK = 0x00;
 476:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 47a:	08 95       	ret

0000047c <_Z9port_initv>:
//Function to configure ports to enable robot's motion

//Function to Initialize PORTS
void port_init()
{
	lcd_port_config();
 47c:	46 de       	rcall	.-884    	; 0x10a <_Z15lcd_port_configv>
	adc_pin_config();
 47e:	f7 cf       	rjmp	.-18     	; 0x46e <_Z14adc_pin_configv>
 480:	08 95       	ret

00000482 <_Z8adc_initv>:
 482:	ea e7       	ldi	r30, 0x7A	; 122
}

void adc_init()
{
	ADCSRA = 0x00;
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
 488:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 48c:	80 e2       	ldi	r24, 0x20	; 32
 48e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ACSR = 0x80;
 492:	80 e8       	ldi	r24, 0x80	; 128
 494:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 496:	86 e8       	ldi	r24, 0x86	; 134
 498:	80 83       	st	Z, r24
 49a:	08 95       	ret

0000049c <_Z14ADC_Conversionh>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
	unsigned char a;
	if(Ch>7)
 49c:	88 30       	cpi	r24, 0x08	; 8
 49e:	18 f0       	brcs	.+6      	; 0x4a6 <_Z14ADC_Conversionh+0xa>
	{
		ADCSRB = 0x08;
 4a0:	98 e0       	ldi	r25, 0x08	; 8
 4a2:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	}
	Ch = Ch & 0x07;  			
	ADMUX= 0x20| Ch;	   		
 4a6:	87 70       	andi	r24, 0x07	; 7
 4a8:	80 62       	ori	r24, 0x20	; 32
 4aa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 4ae:	ea e7       	ldi	r30, 0x7A	; 122
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 81       	ld	r24, Z
 4b4:	80 64       	ori	r24, 0x40	; 64
 4b6:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
 4b8:	80 81       	ld	r24, Z
 4ba:	84 ff       	sbrs	r24, 4
 4bc:	fd cf       	rjmp	.-6      	; 0x4b8 <_Z14ADC_Conversionh+0x1c>
	a=ADCH;
 4be:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 4c2:	ea e7       	ldi	r30, 0x7A	; 122
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	90 81       	ld	r25, Z
 4c8:	90 61       	ori	r25, 0x10	; 16
 4ca:	90 83       	st	Z, r25
	ADCSRB = 0x00;
 4cc:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	return a;
}
 4d0:	08 95       	ret

000004d2 <_Z12print_sensorcch>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	c8 2f       	mov	r28, r24
 4d8:	d6 2f       	mov	r29, r22
 4da:	84 2f       	mov	r24, r20
	
	ADC_Value = 255 - ADC_Conversion(channel);
 4dc:	df df       	rcall	.-66     	; 0x49c <_Z14ADC_Conversionh>
 4de:	80 95       	com	r24
 4e0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
	lcd_print(row, coloumn, ADC_Value, 3);
 4e4:	48 2f       	mov	r20, r24
 4e6:	50 e0       	ldi	r21, 0x00	; 0
 4e8:	23 e0       	ldi	r18, 0x03	; 3
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	6d 2f       	mov	r22, r29
 4ee:	8c 2f       	mov	r24, r28
 4f0:	ce de       	rcall	.-612    	; 0x28e <_Z9lcd_printccji>
}
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <_Z12init_devicesv>:

void init_devices (void)
{
 	cli(); //Clears the global interrupts
 4f8:	f8 94       	cli
	port_init();
 4fa:	c0 df       	rcall	.-128    	; 0x47c <_Z9port_initv>
	adc_init();
 4fc:	c2 df       	rcall	.-124    	; 0x482 <_Z8adc_initv>
 4fe:	78 94       	sei
	sei();   //Enables the global interrupts
 500:	08 95       	ret

00000502 <main>:
 502:	fa df       	rcall	.-12     	; 0x4f8 <_Z12init_devicesv>

//Main Function
int main()
{
	init_devices();
	lcd_set_4bit();
 504:	09 de       	rcall	.-1006   	; 0x118 <_Z12lcd_set_4bitv>
	lcd_init();
 506:	70 de       	rcall	.-800    	; 0x1e8 <_Z8lcd_initv>
 508:	43 e0       	ldi	r20, 0x03	; 3
	
	while(1)
	{
		print_sensor(1,1,3);	//Prints value of White Line Sensor1
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	e1 df       	rcall	.-62     	; 0x4d2 <_Z12print_sensorcch>
 510:	42 e0       	ldi	r20, 0x02	; 2
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
 512:	65 e0       	ldi	r22, 0x05	; 5
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	dd df       	rcall	.-70     	; 0x4d2 <_Z12print_sensorcch>
 518:	41 e0       	ldi	r20, 0x01	; 1
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
 51a:	69 e0       	ldi	r22, 0x09	; 9
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	d9 df       	rcall	.-78     	; 0x4d2 <_Z12print_sensorcch>
 520:	f3 cf       	rjmp	.-26     	; 0x508 <main+0x6>

00000522 <__umulhisi3>:
 522:	a2 9f       	mul	r26, r18
 524:	b0 01       	movw	r22, r0
 526:	b3 9f       	mul	r27, r19
 528:	c0 01       	movw	r24, r0
 52a:	a3 9f       	mul	r26, r19
 52c:	70 0d       	add	r23, r0
 52e:	81 1d       	adc	r24, r1
 530:	11 24       	eor	r1, r1
 532:	91 1d       	adc	r25, r1
 534:	b2 9f       	mul	r27, r18
 536:	70 0d       	add	r23, r0
 538:	81 1d       	adc	r24, r1
 53a:	11 24       	eor	r1, r1
 53c:	91 1d       	adc	r25, r1
 53e:	08 95       	ret

00000540 <_exit>:
 540:	f8 94       	cli

00000542 <__stop_program>:
 542:	ff cf       	rjmp	.-2      	; 0x542 <__stop_program>
